import argparse
import datetime
import logging
import os
import pathlib
import textwrap
import xml
import xml.etree
import xml.etree.ElementTree

import build_flavor
import repoman

repoman.bootstrap()
import omni.repo.man
import omni.repo.usd

THIS_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_ROOT = os.path.join(os.path.dirname(os.path.realpath(__file__)), "../..")
DEPS_ROOT = os.path.join(REPO_ROOT, "deps")


def replace_file(filename, new_file_contents):
    try:
        with open(filename, "r+") as f:
            old_file_contents = f.read()
            if old_file_contents != new_file_contents:
                # only write if different otherwise this will force a rebuild every time
                f.seek(0)
                f.write(new_file_contents)
                f.truncate()
    except OSError:
        os.makedirs(os.path.dirname(os.path.realpath(filename)), exist_ok=True)
        with open(filename, "w") as f:
            f.write(new_file_contents)


def generate_version_header(major, minor, patch, build, package_version, usd_flavor, pyver):
    new_file_contents = f"""
// This file is automatically generated

#define OMNIUSDRESOLVER_VERSION_MAJOR {major}
#define OMNIUSDRESOLVER_VERSION_MINOR {minor}
#define OMNIUSDRESOLVER_VERSION_PATCH {patch}
#define OMNIUSDRESOLVER_VERSION_BUILD {build}
#define OMNIUSDRESOLVER_BUILD_STRING "{package_version}"
#define OMNIUSDRESOLVER_BUILD_FLAVOR "{usd_flavor}"
#define OMNIUSDRESOLVER_BUILD_PYTHON "{pyver}"
"""
    filename = "source/OmniUsdVersion.h"
    replace_file(filename, new_file_contents)


def generate_version_file():
    # extract just the version without the build number, user, git hash etc.
    with open("CHANGELOG.md") as f:
        version = f.readline().rstrip("\r\n")

    replace_file("_build/VERSION", version)
    return version


def generate_usd_deps(options):
    # use repo_usd to generate the usd-deps.packman.xml file
    local_path = options.local_path or None
    omni.repo.usd.perform_generate_usd_deps(
        repo_root=REPO_ROOT,
        usd_flavor=options.usd_flavor,
        usd_version=options.usd_ver,
        python_version=options.python_ver,
        target_dir=DEPS_ROOT,
        local_path=local_path,
    )


def generate_redist_deps(options):
    # TODO: extract client-library dependencies
    with open("deps/usd-deps.packman.xml") as deps_file:
        usd_deps_data = xml.etree.ElementTree.parse(deps_file)

    usd_deps_root = usd_deps_data.getroot()

    with open("deps/target-deps.packman.xml") as deps_file:
        client_library_data = xml.etree.ElementTree.parse(deps_file)

    target_deps_root = client_library_data.getroot()
    client_library_element = target_deps_root.find("./dependency[@name='omni_client_library']")

    if client_library_element:
        usd_deps_root.append(client_library_element)

    xml.etree.ElementTree.indent(usd_deps_root)

    with open("deps/redist.packman.xml", "wb") as deps_file:
        deps_file.write(xml.etree.ElementTree.tostring(usd_deps_root))


if __name__ == "__main__":
    platforms = ["windows-x86_64", "linux-x86_64", "linux-aarch64"]
    platform_host = omni.repo.man.get_and_validate_host_platform(platforms)

    parser = argparse.ArgumentParser()
    parser.add_argument("-p", "--platform-target", dest="platform_target", choices=platforms, default=platform_host)
    parser.add_argument("--usd-flavor", dest="usd_flavor", default=build_flavor.get_usd_flavor(), required=False)
    parser.add_argument("--usd-ver", dest="usd_ver", default=build_flavor.get_usd_version(), required=False)
    parser.add_argument("--python-ver", dest="python_ver", default=build_flavor.get_python_version(), required=False)
    parser.add_argument("--local-path", dest="local_path", default=None, required=False)
    options, _ = parser.parse_known_args()

    omni.repo.man.validate_platform(options.platform_target, platforms, "target")

    # generate the version file for packaging
    version = generate_version_file()
    major, minor, patch = version.partition("-")[0].split(".")

    # generate the version header
    build_flavor_ = build_flavor.get_build_flavor(options.usd_flavor, options.usd_ver)
    build_number_ = omni.repo.man.build_number.generate_build_number(version, flow_v2=True)

    build_count = os.getenv("BUILD_NUMBER", os.getenv("CI_PIPELINE_IID", "0"))
    generate_version_header(major, minor, patch, build_count, build_number_, build_flavor_, options.python_ver)

    # generate the usd-deps.packman.xml file
    generate_usd_deps(options)

    # generate the redist.packman.xml file
    generate_redist_deps(options)
